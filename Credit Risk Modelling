 %pip install seaborn
%pip install imblearn
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt import seaborn as sb
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler from sklearn import metrics
from sklearn.svm import SVC
from imblearn.over_sampling import RandomOverSampler
import warnings warnings.filterwarnings('ignore')

df = pd.read_csv('loan_detection.csv')
df.head()

df.shape

df.info()

df.describe()

 temp = df['Loan_Status_label'].value_counts()
plt.pie(temp.values,
plt.show()

 plt.subplots(figsize=(15, 5))
for i, col in enumerate(['age', 'marital_married']):
        plt.subplot(1, 2, i+1)
        sb.countplot(data=df, x=col, hue='Loan_Status_label')
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['age', 'marital_divorced']):
        plt.subplot(1, 2, i+1)
        sb.countplot(data=df, x=col, hue='Loan_Status_label')
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['age', 'marital_single']):
        plt.subplot(1, 2, i+1)
        sb.countplot(data=df, x=col, hue='Loan_Status_label')
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['age', 'marital_unknown']):
        plt.subplot(1, 2, i+1)
        sb.countplot(data=df, x=col, hue='Loan_Status_label')
plt.tight_layout()
 plt.show()

 plt.subplots(figsize=(15, 5))
for i, col in enumerate(['not_working', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['not_working', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['not_working', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()

 plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_admin.', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_admin.', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_admin.', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()

 plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_blue-collar', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
 for i, col in enumerate(['job_blue-collar', 'loan_yes']): plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_blue-collar', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show

 plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_entrepreneur', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_entrepreneur', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_entrepreneur', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_housemaid', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_housemaid', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_housemaid', 'loan_unknown']):
        plt.subplot(1, 2, i+1)

         sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_management', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_management', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_management', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_retired', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_retired', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_retired', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_self-employed', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
 plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_self-employed', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_self-employed', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_services', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_services', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_services', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_student', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_student', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_student', 'loan_unknown']):
         plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_technician', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_technician', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_technician', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_unemployed', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_unemployed', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_unemployed', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_unknown', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
 plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_unknown', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_unknown', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.distplot(df[col])
plt.tight_layout()
plt.show()
 plt.subplots(figsize=(15, 5))
for i, col in enumerate(['not_working', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['not_working', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['not_working', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_admin.', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_admin.', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_admin.', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
         sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_blue-collar', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_blue-collar', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_blue-collar', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_entrepreneur', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_entrepreneur', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_entrepreneur', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_housemaid', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
27
 plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_housemaid', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_housemaid', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_management', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_management', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_management', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_retired', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_retired', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_retired', 'loan_unknown']):
         plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_self-employed', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_self-employed', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_self-employed', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_services', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_services', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_services', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_student', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
 plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_student', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_student', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_technician', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_technician', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_technician', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_unemployed', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_unemployed', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
 for i, col in enumerate(['job_unemployed', 'loan_unknown']): plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_unknown', 'loan_no']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_unknown', 'loan_yes']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()
plt.subplots(figsize=(15, 5))
for i, col in enumerate(['job_unknown', 'loan_unknown']):
        plt.subplot(1, 2, i+1)
        sb.boxplot(df[col])
plt.tight_layout()
plt.show()

 df.groupby('age').mean()['loan_no']
df.groupby('age').mean()['loan_yes']
df.groupby('age').mean()['loan_unknown']

df.groupby(['marital_married', 'age']).mean()['loan_no']
df.groupby(['marital_married', 'age']).mean()['loan_yes']
df.groupby(['marital_married', 'age']).mean()['loan_unknown']

 df.groupby(['marital_divorced', 'age']).mean()['loan_no']
df.groupby(['marital_divorced', 'age']).mean()['loan_yes']
df.groupby(['marital_divorced', 'age']).mean()['loan_unknown']

 df.groupby(['marital_single', 'age']).mean()['loan_no']
df.groupby(['marital_single', 'age']).mean()['loan_yes']
df.groupby(['marital_single', 'age']).mean()['loan_unknown']

 df.groupby(['marital_unknown', 'age']).mean()['loan_no']
df.groupby(['marital_unknown', 'age']).mean()['loan_yes']
df.groupby(['marital_unknown', 'age']).mean()['loan_unknown']

 # Function to apply label encoding
def encode_labels(data):
for col in data.columns:
if data[col].dtype == 'object': le = LabelEncoder()
                        data[col] = le.fit_transform(data[col])
return data
# Applying function in whole column
df = encode_labels(df)
# Generating Heatmap
sb.heatmap(df.corr() > 0.8, annot=True, cbar=False) plt.show()

features = df.drop('poutcome_nonexistent', axis=1)
target = df['poutcome_nonexistent'].values
X_train, X_val,Y_train, Y_val = train_test_split(features, target, ↪2,
# As the data was highly imbalanced we will balance # it by adding repetitive rows of minority class. ros = RandomOverSampler(sampling_strategy='minority',
X, Y = ros.fit_resample(X_train, Y_train)
X_train.shape, X.shape 
random_state=0)
test_size=0.
random_state=10)

 # Normalizing the features for stable and fast training.
scaler = StandardScaler()
X = scaler.fit_transform(X)
X_val = scaler.transform(X_val)
[20]:

 from sklearn.metrics import roc_auc_score model = SVC(kernel='rbf')
model.fit(X, Y)
print('Training Accuracy : ', metrics.roc_auc_score(Y, model.predict(X)))
print('Validation Accuracy : ', metrics.roc_auc_score(Y_val, model.
↪predict(X_val))) print()

 from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix
training_roc_auc = roc_auc_score(Y, model.predict(X)) validation_roc_auc = roc_auc_score(Y_val, model.predict(X_val)) print('Training ROC AUC Score:', training_roc_auc) print('Validation ROC AUC Score:', validation_roc_auc)
print()
cm = confusion_matrix(Y_val, model.predict(X_val))

 plt.figure(figsize=(6, 6))
sb.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False) plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

 from sklearn.metrics import classification_report print(classification_report(Y_val, model.predict(X_val)))
